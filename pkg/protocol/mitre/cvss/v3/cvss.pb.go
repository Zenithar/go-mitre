// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/protocol/mitre/cvss/v3/cvss.proto

/*
Package cvssv3 is a generated protocol buffer package.

It is generated from these files:
	pkg/protocol/mitre/cvss/v3/cvss.proto

It has these top-level messages:
	BaseMetrics
	Vector
*/
package cvssv3

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// This metric reflects the context by which vulnerability exploitation is
// possible. This metric value (and consequently the Base score) will be larger
// the more remote (logically, and physically) an attacker can be in order to
// exploit the vulnerable component. The assumption is that the number of potential
// attackers for a vulnerability that could be exploited from across the Internet
// is larger than the number of potential attackers that could exploit a vulnerability
// requiring physical access to a device, and therefore warrants a greater score.
type AttackVector int32

const (
	AttackVector_ATTACK_VECTOR_INVALID   AttackVector = 0
	AttackVector_ATTACK_VECTOR_UNDEFINED AttackVector = 1
	// A vulnerability exploitable with network access means the vulnerable component
	// is bound to the network stack and the attacker's path is through OSI layer 3
	// (the network layer). Such a vulnerability is often termed "remotely exploitable"
	// and can be thought of as an attack being exploitable one or more network hops
	// away (e.g. across layer 3 boundaries from routers). An example of a network attack
	// is an attacker causing a denial of service (DoS) by sending a specially crafted
	// TCP packet from across the public Internet (e.g. CVE 2004 0230).
	AttackVector_ATTACK_VECTOR_NETWORK AttackVector = 2
	// A vulnerability exploitable with adjacent network access means the vulnerable
	// component is bound to the network stack, however the attack is limited to the
	// same shared physical (e.g. Bluetooth, IEEE 802.11), or logical (e.g. local IP subnet)
	// network, and cannot be performed across an OSI layer 3 boundary (e.g. a router).
	// An example of an Adjacent attack would be an ARP (IPv4) or neighbor discovery (IPv6)
	// flood leading to a denial of service on the local LAN segment. See also CVE 2013 6014.
	AttackVector_ATTACK_VECTOR_ADJACENT AttackVector = 3
	// A vulnerability exploitable with Local access means that the vulnerable component
	// is not bound to the network stack, and the attacker's path is via read/write/execute
	// capabilities. In some cases, the attacker may be logged in locally in order to exploit
	// the vulnerability, otherwise, she may rely on User Interaction to execute a malicious file.
	AttackVector_ATTACK_VECTOR_LOCAL AttackVector = 4
	// A vulnerability exploitable with Physical access requires the attacker to physically
	// touch or manipulate the vulnerable component. Physical interaction may be brief
	// (e.g. evil maid attack [1]) or persistent. An example of such an attack is a cold boot
	// attack which allows an attacker to access to disk encryption keys after gaining physical
	// access to the system, or peripheral attacks such as Firewire/USB Direct Memory Access
	// attacks.
	AttackVector_ATTACK_VECTOR_PHYSICAL AttackVector = 5
)

var AttackVector_name = map[int32]string{
	0: "ATTACK_VECTOR_INVALID",
	1: "ATTACK_VECTOR_UNDEFINED",
	2: "ATTACK_VECTOR_NETWORK",
	3: "ATTACK_VECTOR_ADJACENT",
	4: "ATTACK_VECTOR_LOCAL",
	5: "ATTACK_VECTOR_PHYSICAL",
}
var AttackVector_value = map[string]int32{
	"ATTACK_VECTOR_INVALID":   0,
	"ATTACK_VECTOR_UNDEFINED": 1,
	"ATTACK_VECTOR_NETWORK":   2,
	"ATTACK_VECTOR_ADJACENT":  3,
	"ATTACK_VECTOR_LOCAL":     4,
	"ATTACK_VECTOR_PHYSICAL":  5,
}

func (x AttackVector) String() string {
	return proto.EnumName(AttackVector_name, int32(x))
}
func (AttackVector) EnumDescriptor() ([]byte, []int) { return fileDescriptorCvss, []int{0} }

// This metric describes the conditions beyond the attacker's control that must exist
// in order to exploit the vulnerability. As described below, such conditions may
// require the collection of more information about the target, the presence of
// certain system configuration settings, or computational exceptions. Importantly,
// the assessment of this metric excludes any requirements for user interaction in
// order to exploit the vulnerability (such conditions are captured in the User
// Interaction metric). This metric value is largest for the least complex attacks.
type AttackComplexity int32

const (
	AttackComplexity_ATTACK_COMPLEXITY_INVALID   AttackComplexity = 0
	AttackComplexity_ATTACK_COMPLEXITY_UNDEFINED AttackComplexity = 1
	// Specialized access conditions or extenuating circumstances do not exist.
	// An attacker can expect repeatable success against the vulnerable component.
	AttackComplexity_ATTACK_COMPLEXITY_LOW AttackComplexity = 2
	// A successful attack depends on conditions beyond the attacker's control.
	// That is, a successful attack cannot be accomplished at will, but requires
	// the attacker to invest in some measurable amount of effort in preparation
	// or execution against the vulnerable component before a successful attack can
	// be expected. 2 For example, a successful attack may depend on an attacker
	// overcoming any of the following conditions:
	// - The attacker must conduct target-specific reconnaissance. For example, on
	//   target configuration settings, sequence numbers, shared secrets, etc.
	// - The attacker must prepare the target environment to improve exploit reliability.
	//   For example, repeated exploitation to win a race condition, or overcoming
	//   advanced exploit mitigation techniques.
	// - The attacker must inject herself into the logical network path between the
	//   target and the resource requested by the victim in order to read and/or
	//   modify network communications (e.g. man in the middle attack).
	AttackComplexity_ATTACK_COMPLEXITY_HIGH AttackComplexity = 3
)

var AttackComplexity_name = map[int32]string{
	0: "ATTACK_COMPLEXITY_INVALID",
	1: "ATTACK_COMPLEXITY_UNDEFINED",
	2: "ATTACK_COMPLEXITY_LOW",
	3: "ATTACK_COMPLEXITY_HIGH",
}
var AttackComplexity_value = map[string]int32{
	"ATTACK_COMPLEXITY_INVALID":   0,
	"ATTACK_COMPLEXITY_UNDEFINED": 1,
	"ATTACK_COMPLEXITY_LOW":       2,
	"ATTACK_COMPLEXITY_HIGH":      3,
}

func (x AttackComplexity) String() string {
	return proto.EnumName(AttackComplexity_name, int32(x))
}
func (AttackComplexity) EnumDescriptor() ([]byte, []int) { return fileDescriptorCvss, []int{1} }

// This metric describes the level of privileges an attacker must possess before
// successfully exploiting the vulnerability. This metric is greatest if no
// privileges are required.
type PrivilegeRequired int32

const (
	PrivilegeRequired_PRIVILEGE_REQUIRED_INVALID   PrivilegeRequired = 0
	PrivilegeRequired_PRIVILEGE_REQUIRED_UNDEFINED PrivilegeRequired = 1
	// The attacker is unauthorized prior to attack, and therefore does not
	// require any access to settings or files to carry out an attack.
	PrivilegeRequired_PRIVILEGE_REQUIRED_NONE PrivilegeRequired = 2
	// The attacker is authorized with (i.e. requires) privileges that provide
	// basic user capabilities that could normally affect only settings and
	// files owned by a user. Alternatively, an attacker with Low privileges may
	// have the ability to cause an impact only to non-sensitive resources.
	PrivilegeRequired_PRIVILEGE_REQUIRED_LOW PrivilegeRequired = 3
	// The attacker is authorized with (i.e. requires) privileges that
	// provide significant (e.g. administrative) control over the vulnerable
	// component that could affect component-wide settings and files.
	PrivilegeRequired_PRIVILEGE_REQUIRED_HIGH PrivilegeRequired = 4
)

var PrivilegeRequired_name = map[int32]string{
	0: "PRIVILEGE_REQUIRED_INVALID",
	1: "PRIVILEGE_REQUIRED_UNDEFINED",
	2: "PRIVILEGE_REQUIRED_NONE",
	3: "PRIVILEGE_REQUIRED_LOW",
	4: "PRIVILEGE_REQUIRED_HIGH",
}
var PrivilegeRequired_value = map[string]int32{
	"PRIVILEGE_REQUIRED_INVALID":   0,
	"PRIVILEGE_REQUIRED_UNDEFINED": 1,
	"PRIVILEGE_REQUIRED_NONE":      2,
	"PRIVILEGE_REQUIRED_LOW":       3,
	"PRIVILEGE_REQUIRED_HIGH":      4,
}

func (x PrivilegeRequired) String() string {
	return proto.EnumName(PrivilegeRequired_name, int32(x))
}
func (PrivilegeRequired) EnumDescriptor() ([]byte, []int) { return fileDescriptorCvss, []int{2} }

// This metric captures the requirement for a user, other than the attacker,
// to participate in the successful compromise of the vulnerable component.
// This metric determines whether the vulnerability can be exploited solely at
// the will of the attacker, or whether a separate user (or user-initiated process)
// must participate in some manner. This metric value is greatest when no user
// interaction is required.
type UserInteraction int32

const (
	UserInteraction_USER_INTERACTION_INVALID   UserInteraction = 0
	UserInteraction_USER_INTERACTION_UNDEFINED UserInteraction = 1
	// The vulnerable system can be exploited without interaction from any user.
	UserInteraction_USER_INTERACTION_NONE UserInteraction = 2
	// Successful exploitation of this vulnerability requires a user to take
	// some action before the vulnerability can be exploited. For example, a
	// successful exploit may only be possible during the installation of an
	// application by a system administrator.
	UserInteraction_USER_INTERACTION_REQUIRED UserInteraction = 3
)

var UserInteraction_name = map[int32]string{
	0: "USER_INTERACTION_INVALID",
	1: "USER_INTERACTION_UNDEFINED",
	2: "USER_INTERACTION_NONE",
	3: "USER_INTERACTION_REQUIRED",
}
var UserInteraction_value = map[string]int32{
	"USER_INTERACTION_INVALID":   0,
	"USER_INTERACTION_UNDEFINED": 1,
	"USER_INTERACTION_NONE":      2,
	"USER_INTERACTION_REQUIRED":  3,
}

func (x UserInteraction) String() string {
	return proto.EnumName(UserInteraction_name, int32(x))
}
func (UserInteraction) EnumDescriptor() ([]byte, []int) { return fileDescriptorCvss, []int{3} }

// Scope is used to tell if scoring has impact modification.
type Scope int32

const (
	Scope_SCOPE_INVALID   Scope = 0
	Scope_SCOPE_UNDEFINED Scope = 1
	// An exploited vulnerability can only affect resources managed by the
	// same authority. In this case the vulnerable component and the impacted
	// component are the same.
	Scope_SCOPE_UNCHANGED Scope = 2
	// An exploited vulnerability can affect resources beyond the authorization
	// privileges intended by the vulnerable component. In this case the
	// vulnerable component and the impacted component are different.
	Scope_SCOPE_CHANGED Scope = 3
)

var Scope_name = map[int32]string{
	0: "SCOPE_INVALID",
	1: "SCOPE_UNDEFINED",
	2: "SCOPE_UNCHANGED",
	3: "SCOPE_CHANGED",
}
var Scope_value = map[string]int32{
	"SCOPE_INVALID":   0,
	"SCOPE_UNDEFINED": 1,
	"SCOPE_UNCHANGED": 2,
	"SCOPE_CHANGED":   3,
}

func (x Scope) String() string {
	return proto.EnumName(Scope_name, int32(x))
}
func (Scope) EnumDescriptor() ([]byte, []int) { return fileDescriptorCvss, []int{4} }

// This metric measures the impact to the confidentiality of the information
// resources managed by a software component due to a successfully exploited
// vulnerability. Confidentiality refers to limiting information access and
// disclosure to only authorized users, as well as preventing access by, or
// disclosure to, unauthorized ones. This metric value increases with the
// degree of loss to the impacted component.
type ConfidentialityImpact int32

const (
	ConfidentialityImpact_CONFIDENTIALITY_IMPACT_INVALID   ConfidentialityImpact = 0
	ConfidentialityImpact_CONFIDENTIALITY_IMPACT_UNDEFINED ConfidentialityImpact = 1
	// There is total loss of confidentiality, resulting in all resources
	// within the impacted component being divulged to the attacker.
	// Alternatively, access to only some restricted information is obtained,
	// but the disclosed information presents a direct, serious impact.
	// For example, an attacker steals the administrator's password, or
	// private encryption keys of a web server.
	ConfidentialityImpact_CONFIDENTIALITY_IMPACT_HIGH ConfidentialityImpact = 2
	// There is some loss of confidentiality. Access to some restricted
	// information is obtained, but the attacker does not have control over
	// what information is obtained, or the amount or kind of loss is constrained.
	// The information disclosure does not cause a direct, serious loss to
	// the impacted component.
	ConfidentialityImpact_CONFIDENTIALITY_IMPACT_LOW ConfidentialityImpact = 3
	// There is no loss of confidentiality within the impacted component.
	ConfidentialityImpact_CONFIDENTIALITY_IMPACT_NONE ConfidentialityImpact = 4
)

var ConfidentialityImpact_name = map[int32]string{
	0: "CONFIDENTIALITY_IMPACT_INVALID",
	1: "CONFIDENTIALITY_IMPACT_UNDEFINED",
	2: "CONFIDENTIALITY_IMPACT_HIGH",
	3: "CONFIDENTIALITY_IMPACT_LOW",
	4: "CONFIDENTIALITY_IMPACT_NONE",
}
var ConfidentialityImpact_value = map[string]int32{
	"CONFIDENTIALITY_IMPACT_INVALID":   0,
	"CONFIDENTIALITY_IMPACT_UNDEFINED": 1,
	"CONFIDENTIALITY_IMPACT_HIGH":      2,
	"CONFIDENTIALITY_IMPACT_LOW":       3,
	"CONFIDENTIALITY_IMPACT_NONE":      4,
}

func (x ConfidentialityImpact) String() string {
	return proto.EnumName(ConfidentialityImpact_name, int32(x))
}
func (ConfidentialityImpact) EnumDescriptor() ([]byte, []int) { return fileDescriptorCvss, []int{5} }

// This metric measures the impact to integrity of a successfully exploited
// vulnerability. Integrity refers to the trustworthiness and veracity of
// information.
// This metric value increases with the consequence to the impacted component.
type IntegrityImpact int32

const (
	IntegrityImpact_INTEGRITY_IMPACT_INVALID   IntegrityImpact = 0
	IntegrityImpact_INTEGRITY_IMPACT_UNDEFINED IntegrityImpact = 1
	// There is a total loss of integrity, or a complete loss of protection.
	// For example, the attacker is able to modify any/all files protected
	// by the impacted component. Alternatively, only some files can be modified,
	// but malicious modification would present a direct, serious consequence
	// to the impacted component.
	IntegrityImpact_INTEGRITY_IMPACT_HIGH IntegrityImpact = 2
	// Modification of data is possible, but the attacker does not have control
	// over the consequence of a modification, or the amount of modification is
	// constrained. The data modification does not have a direct, serious impact
	// on the impacted component.
	IntegrityImpact_INTEGRITY_IMPACT_LOW IntegrityImpact = 3
	// There is no loss of integrity within the impacted component.
	IntegrityImpact_INTEGRITY_IMPACT_NONE IntegrityImpact = 4
)

var IntegrityImpact_name = map[int32]string{
	0: "INTEGRITY_IMPACT_INVALID",
	1: "INTEGRITY_IMPACT_UNDEFINED",
	2: "INTEGRITY_IMPACT_HIGH",
	3: "INTEGRITY_IMPACT_LOW",
	4: "INTEGRITY_IMPACT_NONE",
}
var IntegrityImpact_value = map[string]int32{
	"INTEGRITY_IMPACT_INVALID":   0,
	"INTEGRITY_IMPACT_UNDEFINED": 1,
	"INTEGRITY_IMPACT_HIGH":      2,
	"INTEGRITY_IMPACT_LOW":       3,
	"INTEGRITY_IMPACT_NONE":      4,
}

func (x IntegrityImpact) String() string {
	return proto.EnumName(IntegrityImpact_name, int32(x))
}
func (IntegrityImpact) EnumDescriptor() ([]byte, []int) { return fileDescriptorCvss, []int{6} }

// This metric measures the impact to the availability of the impacted component
// resulting from a successfully exploited vulnerability. While the Confidentiality
// and Integrity impact metrics apply to the loss of confidentiality or integrity
// of data (e.g., information, files) used by the impacted component, this metric
// refers to the loss of availability of the impacted component itself, such as a
// networked service (e.g., web, database, email). Since availability refers to
// the accessibility of information resources, attacks that consume network
// bandwidth, processor cycles, or disk space all impact the availability of an
// impacted component.
// This metric value increases with the consequence to the impacted component.
type AvailabilityImpact int32

const (
	AvailabilityImpact_AVAILABILITY_IMPACT_INVALID   AvailabilityImpact = 0
	AvailabilityImpact_AVAILABILITY_IMPACT_UNDEFINED AvailabilityImpact = 1
	// There is total loss of availability, resulting in the attacker being able
	// to fully deny access to resources in the impacted component; this loss is
	// either sustained (while the attacker continues to deliver the attack) or
	// persistent (the condition persists even after the attack has completed).
	// Alternatively, the attacker has the ability to deny some availability,
	// but the loss of availability presents a direct, serious consequence to
	// the impacted component (e.g., the attacker cannot disrupt existing
	// connections, but can prevent new connections; the attacker can repeatedly
	// exploit a vulnerability that, in each instance of a successful attack,
	// leaks a only small amount of memory, but after repeated exploitation
	// causes a service to become completely unavailable).
	AvailabilityImpact_AVAILABILITY_IMPACT_HIGH AvailabilityImpact = 2
	// There is reduced performance or interruptions in resource availability.
	// Even if repeated exploitation of the vulnerability is possible, the attacker
	// does not have the ability to completely deny service to legitimate users.
	// The resources in the impacted component are either partially available all
	// of the time, or fully available only some of the time, but overall there is
	// no direct, serious consequence to the impacted component.
	AvailabilityImpact_AVAILABILITY_IMPACT_LOW AvailabilityImpact = 3
	// There is no impact to availability within the impacted component.
	AvailabilityImpact_AVAILABILITY_IMPACT_NONE AvailabilityImpact = 4
)

var AvailabilityImpact_name = map[int32]string{
	0: "AVAILABILITY_IMPACT_INVALID",
	1: "AVAILABILITY_IMPACT_UNDEFINED",
	2: "AVAILABILITY_IMPACT_HIGH",
	3: "AVAILABILITY_IMPACT_LOW",
	4: "AVAILABILITY_IMPACT_NONE",
}
var AvailabilityImpact_value = map[string]int32{
	"AVAILABILITY_IMPACT_INVALID":   0,
	"AVAILABILITY_IMPACT_UNDEFINED": 1,
	"AVAILABILITY_IMPACT_HIGH":      2,
	"AVAILABILITY_IMPACT_LOW":       3,
	"AVAILABILITY_IMPACT_NONE":      4,
}

func (x AvailabilityImpact) String() string {
	return proto.EnumName(AvailabilityImpact_name, int32(x))
}
func (AvailabilityImpact) EnumDescriptor() ([]byte, []int) { return fileDescriptorCvss, []int{7} }

// BaseMetrics regroups base CVSS attributes.
type BaseMetrics struct {
	AttackVector          AttackVector          `protobuf:"varint,1,opt,name=attack_vector,json=attackVector,proto3,enum=mitre.cvss.v3.AttackVector" json:"attack_vector,omitempty"`
	AttackComplexity      AttackComplexity      `protobuf:"varint,2,opt,name=attack_complexity,json=attackComplexity,proto3,enum=mitre.cvss.v3.AttackComplexity" json:"attack_complexity,omitempty"`
	PrivilegeRequired     PrivilegeRequired     `protobuf:"varint,3,opt,name=privilege_required,json=privilegeRequired,proto3,enum=mitre.cvss.v3.PrivilegeRequired" json:"privilege_required,omitempty"`
	UserInteraction       UserInteraction       `protobuf:"varint,4,opt,name=user_interaction,json=userInteraction,proto3,enum=mitre.cvss.v3.UserInteraction" json:"user_interaction,omitempty"`
	Scope                 Scope                 `protobuf:"varint,5,opt,name=scope,proto3,enum=mitre.cvss.v3.Scope" json:"scope,omitempty"`
	ConfidentialityImpact ConfidentialityImpact `protobuf:"varint,6,opt,name=confidentiality_impact,json=confidentialityImpact,proto3,enum=mitre.cvss.v3.ConfidentialityImpact" json:"confidentiality_impact,omitempty"`
	IntegrityImpact       IntegrityImpact       `protobuf:"varint,7,opt,name=integrity_impact,json=integrityImpact,proto3,enum=mitre.cvss.v3.IntegrityImpact" json:"integrity_impact,omitempty"`
	AvailabilityImpact    AvailabilityImpact    `protobuf:"varint,8,opt,name=availability_impact,json=availabilityImpact,proto3,enum=mitre.cvss.v3.AvailabilityImpact" json:"availability_impact,omitempty"`
}

func (m *BaseMetrics) Reset()                    { *m = BaseMetrics{} }
func (m *BaseMetrics) String() string            { return proto.CompactTextString(m) }
func (*BaseMetrics) ProtoMessage()               {}
func (*BaseMetrics) Descriptor() ([]byte, []int) { return fileDescriptorCvss, []int{0} }

func (m *BaseMetrics) GetAttackVector() AttackVector {
	if m != nil {
		return m.AttackVector
	}
	return AttackVector_ATTACK_VECTOR_INVALID
}

func (m *BaseMetrics) GetAttackComplexity() AttackComplexity {
	if m != nil {
		return m.AttackComplexity
	}
	return AttackComplexity_ATTACK_COMPLEXITY_INVALID
}

func (m *BaseMetrics) GetPrivilegeRequired() PrivilegeRequired {
	if m != nil {
		return m.PrivilegeRequired
	}
	return PrivilegeRequired_PRIVILEGE_REQUIRED_INVALID
}

func (m *BaseMetrics) GetUserInteraction() UserInteraction {
	if m != nil {
		return m.UserInteraction
	}
	return UserInteraction_USER_INTERACTION_INVALID
}

func (m *BaseMetrics) GetScope() Scope {
	if m != nil {
		return m.Scope
	}
	return Scope_SCOPE_INVALID
}

func (m *BaseMetrics) GetConfidentialityImpact() ConfidentialityImpact {
	if m != nil {
		return m.ConfidentialityImpact
	}
	return ConfidentialityImpact_CONFIDENTIALITY_IMPACT_INVALID
}

func (m *BaseMetrics) GetIntegrityImpact() IntegrityImpact {
	if m != nil {
		return m.IntegrityImpact
	}
	return IntegrityImpact_INTEGRITY_IMPACT_INVALID
}

func (m *BaseMetrics) GetAvailabilityImpact() AvailabilityImpact {
	if m != nil {
		return m.AvailabilityImpact
	}
	return AvailabilityImpact_AVAILABILITY_IMPACT_INVALID
}

// Vector defines CVSS object attributes.
type Vector struct {
	BaseMetrics *BaseMetrics `protobuf:"bytes,1,opt,name=base_metrics,json=baseMetrics" json:"base_metrics,omitempty"`
}

func (m *Vector) Reset()                    { *m = Vector{} }
func (m *Vector) String() string            { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()               {}
func (*Vector) Descriptor() ([]byte, []int) { return fileDescriptorCvss, []int{1} }

func (m *Vector) GetBaseMetrics() *BaseMetrics {
	if m != nil {
		return m.BaseMetrics
	}
	return nil
}

func init() {
	proto.RegisterType((*BaseMetrics)(nil), "mitre.cvss.v3.BaseMetrics")
	proto.RegisterType((*Vector)(nil), "mitre.cvss.v3.Vector")
	proto.RegisterEnum("mitre.cvss.v3.AttackVector", AttackVector_name, AttackVector_value)
	proto.RegisterEnum("mitre.cvss.v3.AttackComplexity", AttackComplexity_name, AttackComplexity_value)
	proto.RegisterEnum("mitre.cvss.v3.PrivilegeRequired", PrivilegeRequired_name, PrivilegeRequired_value)
	proto.RegisterEnum("mitre.cvss.v3.UserInteraction", UserInteraction_name, UserInteraction_value)
	proto.RegisterEnum("mitre.cvss.v3.Scope", Scope_name, Scope_value)
	proto.RegisterEnum("mitre.cvss.v3.ConfidentialityImpact", ConfidentialityImpact_name, ConfidentialityImpact_value)
	proto.RegisterEnum("mitre.cvss.v3.IntegrityImpact", IntegrityImpact_name, IntegrityImpact_value)
	proto.RegisterEnum("mitre.cvss.v3.AvailabilityImpact", AvailabilityImpact_name, AvailabilityImpact_value)
}

func init() { proto.RegisterFile("pkg/protocol/mitre/cvss/v3/cvss.proto", fileDescriptorCvss) }

var fileDescriptorCvss = []byte{
	// 831 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xc6, 0x49, 0x5a, 0xe0, 0xb4, 0x25, 0xee, 0x74, 0xbb, 0x75, 0x93, 0x36, 0xed, 0x56, 0x8b,
	0x84, 0x72, 0x91, 0x4a, 0x9b, 0x6b, 0x24, 0x5c, 0x67, 0x36, 0x1d, 0xd6, 0xb1, 0xc3, 0xd4, 0x4d,
	0x77, 0x61, 0x25, 0xcb, 0xf5, 0x0e, 0x65, 0xb4, 0x69, 0x1c, 0x6c, 0xd7, 0x62, 0x79, 0x03, 0x9e,
	0x02, 0x89, 0x4b, 0xb8, 0x82, 0x57, 0xe0, 0x8e, 0xb7, 0xe0, 0x4d, 0x90, 0xc7, 0x0e, 0x1d, 0xff,
	0xe4, 0xaa, 0x9a, 0xf3, 0xfd, 0xf8, 0x9b, 0x33, 0x67, 0xa6, 0x81, 0xcf, 0x97, 0xef, 0xef, 0xce,
	0x97, 0x61, 0x10, 0x07, 0x7e, 0x30, 0x3f, 0xbf, 0xe7, 0x71, 0xc8, 0xce, 0xfd, 0x24, 0x8a, 0xce,
	0x93, 0xa1, 0xf8, 0x3b, 0x10, 0x18, 0xda, 0x11, 0xc8, 0x40, 0x54, 0x92, 0xe1, 0xd9, 0xbf, 0x2d,
	0xd8, 0xba, 0xf0, 0x22, 0x36, 0x61, 0x71, 0xc8, 0xfd, 0x08, 0x7d, 0x05, 0x3b, 0x5e, 0x1c, 0x7b,
	0xfe, 0x7b, 0x37, 0x61, 0x7e, 0x1c, 0x84, 0x9a, 0x72, 0xaa, 0x7c, 0xf1, 0xd9, 0x8b, 0xee, 0xa0,
	0x20, 0x1b, 0xe8, 0x82, 0x33, 0x13, 0x14, 0xba, 0xed, 0x49, 0x2b, 0x64, 0xc2, 0x6e, 0xee, 0xe0,
	0x07, 0xf7, 0xcb, 0x39, 0xfb, 0x89, 0xc7, 0x1f, 0xb4, 0x86, 0x70, 0x39, 0xa9, 0x75, 0x31, 0xfe,
	0xa7, 0x51, 0xd5, 0x2b, 0x55, 0x90, 0x0d, 0x68, 0x19, 0xf2, 0x84, 0xcf, 0xd9, 0x1d, 0x73, 0x43,
	0xf6, 0xe3, 0x03, 0x0f, 0xd9, 0x3b, 0xad, 0x29, 0xec, 0x4e, 0x4b, 0x76, 0xd3, 0x15, 0x91, 0xe6,
	0x3c, 0xba, 0xbb, 0x2c, 0x97, 0x10, 0x01, 0xf5, 0x21, 0x62, 0xa1, 0xcb, 0x17, 0x31, 0x0b, 0x3d,
	0x3f, 0xe6, 0xc1, 0x42, 0x6b, 0x09, 0xbb, 0x5e, 0xc9, 0xee, 0x3a, 0x62, 0x21, 0x79, 0x64, 0xd1,
	0xf6, 0x43, 0xb1, 0x80, 0xfa, 0xb0, 0x11, 0xf9, 0xc1, 0x92, 0x69, 0x1b, 0x42, 0xff, 0xa4, 0xa4,
	0xbf, 0x4a, 0x31, 0x9a, 0x51, 0xd0, 0x77, 0xf0, 0xd4, 0x0f, 0x16, 0xdf, 0xf3, 0x77, 0x6c, 0x11,
	0x73, 0x6f, 0xce, 0xe3, 0x0f, 0x2e, 0xbf, 0x5f, 0x7a, 0x7e, 0xac, 0x6d, 0x0a, 0xf1, 0xf3, 0x92,
	0xd8, 0x28, 0x92, 0x89, 0xe0, 0xd2, 0x7d, 0xbf, 0xae, 0x9c, 0xee, 0x29, 0xdd, 0xce, 0x5d, 0x28,
	0xd9, 0x7e, 0x5c, 0xbb, 0x27, 0xb2, 0xa2, 0xe5, 0x86, 0x6d, 0x5e, 0x2c, 0x20, 0x0a, 0x7b, 0x5e,
	0xe2, 0xf1, 0xb9, 0x77, 0xcb, 0xe5, 0x90, 0x9f, 0x08, 0xb7, 0x67, 0xe5, 0xf3, 0x93, 0x98, 0xb9,
	0x21, 0xf2, 0x2a, 0xb5, 0xb3, 0x31, 0x6c, 0xe6, 0xb3, 0xf1, 0x25, 0x6c, 0xdf, 0x7a, 0x11, 0x73,
	0xef, 0xb3, 0x69, 0x13, 0xc3, 0xb5, 0xf5, 0xa2, 0x53, 0xb2, 0x95, 0xe6, 0x91, 0x6e, 0xdd, 0x3e,
	0x2e, 0xfa, 0x7f, 0x29, 0xb0, 0x2d, 0x4f, 0x1e, 0x3a, 0x84, 0x7d, 0xdd, 0x71, 0x74, 0xe3, 0x95,
	0x3b, 0xc3, 0x86, 0x63, 0x53, 0x97, 0x58, 0x33, 0xdd, 0x24, 0x23, 0xf5, 0x23, 0xd4, 0x85, 0x83,
	0x22, 0x74, 0x6d, 0x8d, 0xf0, 0x4b, 0x62, 0xe1, 0x91, 0xaa, 0x54, 0x75, 0x16, 0x76, 0x6e, 0x6c,
	0xfa, 0x4a, 0x6d, 0xa0, 0x0e, 0x3c, 0x2d, 0x42, 0xfa, 0xe8, 0x6b, 0xdd, 0xc0, 0x96, 0xa3, 0x36,
	0xd1, 0x01, 0xec, 0x15, 0x31, 0xd3, 0x36, 0x74, 0x53, 0x6d, 0x55, 0x45, 0xd3, 0xcb, 0x37, 0x57,
	0x24, 0xc5, 0x36, 0xfa, 0xbf, 0x28, 0xa0, 0x96, 0x07, 0x1d, 0x1d, 0xc3, 0x61, 0x2e, 0x30, 0xec,
	0xc9, 0xd4, 0xc4, 0xaf, 0x89, 0xf3, 0x46, 0x0a, 0x7f, 0x02, 0xdd, 0x2a, 0x5c, 0xbf, 0x01, 0x89,
	0x60, 0xda, 0x37, 0x85, 0x0d, 0x48, 0xd0, 0x25, 0x19, 0x5f, 0xaa, 0xcd, 0xfe, 0x1f, 0x0a, 0xec,
	0x56, 0x6e, 0x09, 0xea, 0x41, 0x67, 0x4a, 0xc9, 0x8c, 0x98, 0x78, 0x8c, 0x5d, 0x8a, 0xbf, 0xb9,
	0x26, 0x14, 0x8f, 0xa4, 0x34, 0xa7, 0x70, 0x54, 0x83, 0xcb, 0x71, 0xba, 0x70, 0x50, 0xc3, 0xb0,
	0x6c, 0x0b, 0x67, 0x81, 0x6a, 0xc0, 0x34, 0x6c, 0x73, 0x8d, 0x50, 0xa4, 0x6d, 0xa5, 0x9d, 0x6b,
	0x97, 0x2e, 0x21, 0x3a, 0x02, 0xed, 0xfa, 0x0a, 0xa7, 0x07, 0xed, 0x60, 0xaa, 0x1b, 0x0e, 0xb1,
	0x2d, 0x29, 0x69, 0x0f, 0x3a, 0x15, 0xb4, 0xd4, 0xb6, 0x0a, 0x9e, 0xa7, 0x3c, 0x86, 0xc3, 0x0a,
	0xb4, 0x0a, 0xa4, 0x36, 0xfb, 0x37, 0xb0, 0x21, 0xee, 0x33, 0xda, 0x85, 0x9d, 0x2b, 0xc3, 0x9e,
	0x62, 0xe9, 0xab, 0x7b, 0xd0, 0xce, 0x4a, 0xf2, 0xa7, 0xa4, 0xa2, 0x71, 0xa9, 0x5b, 0x63, 0x3c,
	0x52, 0x1b, 0x8f, 0xe2, 0x55, 0xa9, 0xd9, 0xff, 0x5b, 0x81, 0xfd, 0xda, 0xcb, 0x8e, 0xce, 0xa0,
	0x67, 0xd8, 0xd6, 0x4b, 0x32, 0xc2, 0x96, 0x43, 0x74, 0x53, 0x4c, 0xc8, 0x64, 0xaa, 0x1b, 0x8e,
	0xf4, 0xe9, 0xe7, 0x70, 0xba, 0x86, 0x23, 0x67, 0x39, 0x81, 0xee, 0x1a, 0x96, 0xe8, 0x74, 0x23,
	0xed, 0xdb, 0x1a, 0x42, 0x76, 0x4c, 0xeb, 0x0d, 0x44, 0xf7, 0x5a, 0xfd, 0x5f, 0x15, 0x68, 0x97,
	0xde, 0x96, 0xf4, 0xa8, 0xd2, 0x66, 0x8e, 0x69, 0x6d, 0xf2, 0x1e, 0x74, 0x2a, 0x68, 0xe9, 0xa8,
	0x2a, 0x78, 0x9e, 0x56, 0x83, 0x27, 0x15, 0x28, 0xcb, 0x59, 0x27, 0xca, 0x13, 0xfe, 0xa9, 0x00,
	0xaa, 0xbe, 0x57, 0xe2, 0xa6, 0xcd, 0x74, 0x62, 0xea, 0x17, 0xa4, 0xbe, 0xc3, 0xcf, 0xe0, 0xb8,
	0x8e, 0x20, 0x47, 0x3d, 0x02, 0xad, 0x8e, 0x92, 0xa7, 0x4d, 0x1f, 0xa2, 0x1a, 0x34, 0x0b, 0xbc,
	0x46, 0x9a, 0x65, 0xbe, 0xb8, 0x81, 0x4e, 0x10, 0xde, 0x0d, 0x7e, 0x66, 0x0b, 0x1e, 0xff, 0xe0,
	0x85, 0xc5, 0x67, 0xf2, 0xe2, 0x53, 0x23, 0x89, 0xa2, 0x69, 0xfa, 0x4f, 0x7d, 0xaa, 0x7c, 0xbb,
	0x99, 0x56, 0x93, 0xe1, 0x6f, 0x8d, 0xe6, 0xc4, 0x78, 0xfd, 0x7b, 0x63, 0x67, 0x22, 0xa8, 0x29,
	0x63, 0x30, 0x1b, 0xfe, 0x93, 0xaf, 0xdf, 0xa6, 0xeb, 0xb7, 0xb3, 0xe1, 0xed, 0xa6, 0xf8, 0x2d,
	0x30, 0xfc, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x32, 0x75, 0x40, 0x34, 0x08, 0x00, 0x00,
}
